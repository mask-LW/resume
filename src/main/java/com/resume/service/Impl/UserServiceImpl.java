package com.resume.service.Impl;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.resume.common.Const;
import com.resume.common.ServerResponse;
import com.resume.common.TokenCache;
import com.resume.dao.UserMapper;
import com.resume.pojo.User;
import com.resume.service.IUserService;
import com.resume.util.MD5Util;

/**
 * 
 * @author mac
 *
 */

@Service("iUserService")
public class UserServiceImpl implements IUserService {
	
	
	@Autowired
	private UserMapper userMapper;
	
	
	@Override
	public ServerResponse<User> login( String username,String password) {
		
		int resultCount = userMapper.checkUserName(username);
		if(resultCount == 0 ) {
			return ServerResponse.createByErrorMessage("用户名不存在");
		}
		
		//md5加密
		String md5Password = MD5Util.MD5EncodeUtf8(password);
		User user = userMapper.selectLogin(username, md5Password);
		if(user == null ) {
			return ServerResponse.createByErrorMessage("密码错误");
		}
		
		user.setPassword(org.apache.commons.lang3.StringUtils.EMPTY);
		
		return ServerResponse.createBySuccess("登陆成功", user);
	}
	
	
	public ServerResponse<String> register(User user) {
		//校验用户名、email、电话是否存在
		int resultCount = userMapper.checkUserName(user.getUsername());
		if(resultCount > 0 ) {
			return ServerResponse.createByErrorMessage("用户名已存在");
		}
		int resultCount1 = userMapper.checkEmail(user.getEmail());
		if(resultCount1 > 0 ) {
			return ServerResponse.createByErrorMessage("email已存在");
		}
		int resultCount2 = userMapper.checkPhone(user.getPhone());
		if(resultCount2 > 0 ) {
			return ServerResponse.createByErrorMessage("电话号码已存在");
		}
		
		user.setRole(Const.Role.ROLE_CUSTOMER);
		
		//md5密码加密
		
		user.setPassword(MD5Util.MD5EncodeUtf8(user.getPassword()));
		
		resultCount = userMapper.insert(user);
		if(resultCount == 0) {
			return ServerResponse.createByErrorMessage("注册失败");
		}
		
		return ServerResponse.createBySuccess("注册成功");
		
	}
	
	
	public ServerResponse<String> checkValid(String str,String type) {
		if(StringUtils.isNotBlank(type)) {
			//开始校验
			if(Const.USERNAME.equals(type)) {
				int resultCount = userMapper.checkUserName(str);
				if(resultCount > 0 ) {
					return ServerResponse.createByErrorMessage("用户名已存在");
				}
			}
			if(Const.EMAIL.equals(type)) {
				int resultCount = userMapper.checkUserName(str);
				if(resultCount > 0 ) {
					return ServerResponse.createByErrorMessage("email已存在");
				}
			}
			if(Const.PHONE.equals(type)) {
				int resultCount = userMapper.checkUserName(str);
				if(resultCount > 0 ) {
					return ServerResponse.createByErrorMessage("电话号码已存在");
				}
			}
		}else {
			return ServerResponse.createByErrorMessage("参数错误");
		}
		return ServerResponse.createBySuccess("校验成功");
	}
	
	
	public ServerResponse<String> selectQuestion(String username){

        ServerResponse<?> validResponse = this.checkValid(username,Const.USERNAME);
        if(validResponse.isSuccess()){
            //用户不存在
            return ServerResponse.createByErrorMessage("用户不存在");
        }
        String question = userMapper.selectQuestionByUsername(username);
        if(org.apache.commons.lang3.StringUtils.isNotBlank(question)){
            return ServerResponse.createBySuccess(question);
        }
        return ServerResponse.createByErrorMessage("找回密码的问题是空的");
    }
	
	 public ServerResponse<String> checkAnswer(String username,String question,String answer){
	        int resultCount = userMapper.checkAnswer(username,question,answer);
	        if(resultCount>0){
	            //说明问题及问题答案是这个用户的,并且是正确的
	            String forgetToken = UUID.randomUUID().toString();
	            TokenCache.setKey(TokenCache.TOKEN_PREFIX+username,forgetToken);
	            return ServerResponse.createBySuccess(forgetToken);
	        }
	        return ServerResponse.createByErrorMessage("问题的答案错误");
	    }


	@Override
	public ServerResponse<String> forgetResetPassword(String username,String passwordNew,String forgetToken){
        if(org.apache.commons.lang3.StringUtils.isBlank(forgetToken)){
            return ServerResponse.createByErrorMessage("参数错误,token需要传递");
        }
        ServerResponse<?> validResponse = this.checkValid(username,Const.USERNAME);
        if(validResponse.isSuccess()){
            //用户不存在
            return ServerResponse.createByErrorMessage("用户不存在");
        }
        String token = TokenCache.getKey(TokenCache.TOKEN_PREFIX+username);
        if(org.apache.commons.lang3.StringUtils.isBlank(token)){
            return ServerResponse.createByErrorMessage("token无效或者过期");
        }

        if(org.apache.commons.lang3.StringUtils.equals(forgetToken,token)){
            String md5Password  = MD5Util.MD5EncodeUtf8(passwordNew);
            int rowCount = userMapper.updatePasswordByUsername(username,md5Password);

            if(rowCount > 0){
                return ServerResponse.createBySuccessMessage("修改密码成功");
            }
        }else{
            return ServerResponse.createByErrorMessage("token错误,请重新获取重置密码的token");
        }
        return ServerResponse.createByErrorMessage("修改密码失败");
    }


	@Override
	   public ServerResponse<String> resetPassword(String passwordOld,String passwordNew,User user){
        //防止横向越权,要校验一下这个用户的旧密码,一定要指定是这个用户.因为我们会查询一个count(1),如果不指定id,那么结果就是true啦count>0;
        int resultCount = userMapper.checkPassword(MD5Util.MD5EncodeUtf8(passwordOld),user.getId());
        if(resultCount == 0){
            return ServerResponse.createByErrorMessage("旧密码错误");
        }

        user.setPassword(MD5Util.MD5EncodeUtf8(passwordNew));
        int updateCount = userMapper.updateByPrimaryKeySelective(user);
        if(updateCount > 0){
            return ServerResponse.createBySuccessMessage("密码更新成功");
        }
        return ServerResponse.createByErrorMessage("密码更新失败");
    }


	@Override
	 public ServerResponse<User> updateInformation(User user){
        //username是不能被更新的
        //email也要进行一个校验,校验新的email是不是已经存在,并且存在的email如果相同的话,不能是我们当前的这个用户的.
        int resultCount = userMapper.checkEmailByUserId(user.getEmail(),user.getId());
        if(resultCount > 0){
            return ServerResponse.createByErrorMessage("email已存在,请更换email再尝试更新");
        }
        int resultCount1 = userMapper.checkPhoneByUserId(user.getEmail(),user.getId());
        if(resultCount1 > 0){
            return ServerResponse.createByErrorMessage("该电话号码已存在,请更换电话号码再尝试更新");
        }
        //校验email、 phone是否被其他用户占用
        User updateUser = new User();
        updateUser.setId(user.getId());
        updateUser.setEmail(user.getEmail());
        updateUser.setPhone(user.getPhone());
        updateUser.setQuestion(user.getQuestion());
        updateUser.setAnswer(user.getAnswer());

        int updateCount = userMapper.updateByPrimaryKeySelective(updateUser);
        if(updateCount > 0){
            return ServerResponse.createBySuccess("更新个人信息成功",updateUser);
        }
        return ServerResponse.createByErrorMessage("更新个人信息失败");
    }


	@Override
	  public ServerResponse<User> getInformation(Integer userId){
        User user = userMapper.selectByPrimaryKey(userId);
        if(user == null){
            return ServerResponse.createByErrorMessage("找不到当前用户");
        }
        user.setPassword(org.apache.commons.lang3.StringUtils.EMPTY);
        return ServerResponse.createBySuccess(user);

    }


	@Override
	public ServerResponse<List<User>> list(int role) {
		List<User> user = userMapper.selectByRole(role);
		return ServerResponse.createBySuccess(user);
	}


	@Override
	public ServerResponse<User> queryByName(String username) {
		if(StringUtils.isNotBlank(username)) {
			User user = userMapper.selectByUserName(username);
			return ServerResponse.createBySuccess(user);
		}
		return ServerResponse.createByErrorMessage("参数错误");
	}


	@Override
	public ServerResponse<User> queryById(Integer userId) {
		if(userId != null) {
			User user = userMapper.selectByPrimaryKey(userId);
			return ServerResponse.createBySuccess(user);
		}
		return ServerResponse.createByErrorMessage("参数错误");
	}


	@Override
	public ServerResponse<String> update(Integer userId, User customer) {
		if(userId != null || customer!= null) {
			User user = userMapper.selectByPrimaryKey(userId);
			
			user.setUsername(customer.getUsername());
			user.setPhone(customer.getPhone());
			user.setAnswer(customer.getAnswer());
			user.setQuestion(customer.getQuestion());
			user.setUpdateTime(new Date());
			user.setRole(customer.getRole());
			user.setEmail(customer.getEmail());
			user.setJob(customer.getJob());
		
			
			int rowCount = userMapper.updateByPrimaryKeySelective(user);
			if(rowCount > 0) {
				return ServerResponse.createBySuccess("更新成功");
			}
			return ServerResponse.createByErrorMessage("更新失败");
		}
		
		return ServerResponse.createByErrorMessage("参数错误");
	}


	@Override
	public ServerResponse<String> delete(Integer userId) {
		if(userId != null) {
			int rowCount = userMapper.deleteByPrimaryKey(userId);
			if(rowCount > 0) {
				return ServerResponse.createBySuccess("删除成功");
			}
			return ServerResponse.createByErrorMessage("删除失败");
		}
		return ServerResponse.createByErrorMessage("参数错误");
		
	}


	

	
	 

}